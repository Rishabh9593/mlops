name: CI/CD Pipeline for ML Project
permissions:
  contents: write 

on:
  push:
    branches:
      - main
      - ml*
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Lint Codebase
        run: flake8 src/ tests/

  deploy_and_test:
    name: deploy_and_test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Train Model
        run: python src/train.py  # Generates models/model.pkl

      - name: Run Tests
        run: pytest tests/

      - name: Upload Model as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: model-artifact
          path: models/model.pkl

  predict:
    name: Predict with Model
    runs-on: ubuntu-latest
    needs: deploy_and_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install scikit-learn  # Make sure the necessary libraries are installed

      - name: Download Model Artifact
        uses: actions/download-artifact@v3
        with:
          name: model-artifact
          path: models/

      - name: Run Prediction Script
        run: |
          python src/predict.py  # Run the prediction script


  version_control:
    name: Version Control
    runs-on: ubuntu-latest
    if: (github.ref_name == 'main' || github.event.pull_request.base.ref == 'main') && !contains(github.event.head_commit.message, 'Merge pull request')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get the latest tag
        id: get-latest-tag
        run: |
          # Fetch all tags from the repository
          git fetch --tags
    
          # Get the latest tag, or default to "0.0.0" if no tags exist
          TAG=$(git tag -l | sort -V | tail -n 1 || echo "0.0.0")
    
          echo "Latest tag: $TAG"
          echo "::set-output name=tag::$TAG"

      - name: Get merge commit message
        id: get-merge-message
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Use the pull request title as the commit message
            MERGE_MESSAGE="${{ github.event.pull_request.title }}"
          else
            # For direct commits, get the latest commit message
            MERGE_MESSAGE=$(git log -1 --pretty=format:%s)
          fi

          echo "Merge message: $MERGE_MESSAGE"
          echo "::set-output name=merge_message::$MERGE_MESSAGE"
          

      - name: Determine next version
        id: next-version
        run: |
          TAG="${{ steps.get-latest-tag.outputs.tag }}"
          COMMIT_MSG="${{ steps.get-merge-message.outputs.merge_message }}"
          echo "Processing tag: $TAG with commit message: $COMMIT_MSG"

          # Parse version
          IFS='.' read -r MAJOR MINOR PATCH <<< "${TAG:-0.0.0}"

          if [[ "$TAG" == "0.0.0" ]]; then
            if [[ "$COMMIT_MSG" == feat:* ]]; then
              NEW_VERSION="1.0.0"
            else
              # Allow merge commit or other commit types for the first commit
              NEW_VERSION="1.0.0"
            fi
          elif [[ "$COMMIT_MSG" == test:* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          elif [[ "$COMMIT_MSG" == fix:* ]]; then
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          else
            echo "Error: Commit message must start with 'feat:', 'test:', or 'fix:'" >&2
            exit 1
          fi

          echo "New version: $NEW_VERSION"
          echo "::set-output name=version::$NEW_VERSION"

      - name: Create and push tag
        #if: steps.tag-exists.outputs.exists == 'false'
        env:
          VERSION: ${{ steps.next-version.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Skip version control job if this is a tag push event
          if [ "${GITHUB_REF}" == "refs/tags/${{ steps.next-version.outputs.version }}" ]; then
            echo "Skipping tag creation since this is a tag push."
            exit 0
          fi

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
          
      - name: Skip Tag Creation
        #if: steps.tag-exists.outputs.exists == 'true'
        run: echo "Skipping tag creation as the tag already exists."
 
